"Note","Course","Module","Clip","Time in Clip","URL"
"RxJS is a library for composing asynchronous and event-based programs by using observable sequences.\nin short - manage data as it flows through time.","RxJS in Angular: Reactive Development","Introduction","What Is RxJS?","0:38","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=5ed2fcd0-2c43-476f-b2c1-2206998bc7a6&clip=1&mode=live&start=38&noteid=7797b3f0-1c49-4d7f-be32-120ba218e3ce"
"Reactive Programming - a declarative programming paradigm concerned with data streams and propagation of data.\nThe essence of functional reactive programming is to specify the dynamic behavior of a value completely at the time of declaration.","RxJS in Angular: Reactive Development","Introduction","What Is Reactive Development?","0:13","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=5ed2fcd0-2c43-476f-b2c1-2206998bc7a6&clip=2&mode=live&start=13&noteid=f1d2549f-0e5f-4aaa-bb08-9c85a94523ce"
"Observer is a collection of callbacks that knows how to listen to values delivered by the Observable.","RxJS in Angular: Reactive Development","RxJS Terms and Syntax","Observer/Subscriber","1:39","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=d0e4daf1-ff47-40d2-85e9-fe5d2e301d23&clip=1&mode=live&start=99&noteid=7e19825e-9d1a-435b-b7f2-cbf53a8076fc"
"https://rxjs.dev","RxJS in Angular: Reactive Development","RxJS Operators","RxJS Operator Overview","2:13","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=79832f94-b0f9-4939-949f-5e29f9d30278&clip=1&mode=live&start=133&noteid=73470eb1-76ff-42d1-a582-9ba7d9e24073"
"Merge and Concat\nFlattening operators\nCombining operators","RxJS in Angular: Reactive Development","Combining Streams","Combination Operators/Functions","0:36","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=2f131401-33e5-4c57-b1de-49a08dcc21ff&clip=1&mode=live&start=36&noteid=b82cf52a-f088-4527-8a13-7cc087ce6732"
"CombineLatest - creates an observable using the latest values from each input observable. (each input observable should have emitted atleast 1 item)\nuse to re-evaluate state when an action occurs.\ncompletes when all streams complete.\n\ncombineLatest([a$, b$, c$])","RxJS in Angular: Reactive Development","Combining Streams","RxJS Creation Function: combineLatest","2:03","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=2f131401-33e5-4c57-b1de-49a08dcc21ff&clip=2&mode=live&start=123&noteid=20668ad6-eaa2-42a5-ac4d-dca99e946f7c"
"ForkJoin - creates an observable using last value from each input observable. \nuse to wait to process any results until all steams are complete.\ndon't use when working with streams that don't complete.\nwhen all streams complete, it emits a value to the output stream.\n\nforkJoin([a$, b$, c$])","RxJS in Angular: Reactive Development","Combining Streams","RxJS Creation Function: forkJoin","0:00","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=2f131401-33e5-4c57-b1de-49a08dcc21ff&clip=3&mode=live&start=0&noteid=63550ee4-5673-4937-bf5c-68a3bd06fc1e"
"withLatestFrom - creates an observable using the latest values from each input observable but only when the source stream emits.\ncompletes when source stream completes.\nuse to react to changes in only one stream or to regulate the output of the other streams.\n\na$.pipe(withLatestFrom(b$, c$))","RxJS in Angular: Reactive Development","Combining Streams","RxJS Operator: withLatestFrom","0:27","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=2f131401-33e5-4c57-b1de-49a08dcc21ff&clip=4&mode=live&start=27&noteid=66e80105-fff3-451b-a64d-5466f75f2449"
"Subject - it is a special type of observable that is both an observable and observer.\nObserver is unicast meaning each subscriber will get unique copy of the observer whereas Subject is multicast meaning multiple subscriber shares the same stream.","RxJS in Angular: Reactive Development","Reacting to Actions","Subject and BehaviorSubject","0:31","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=d0f50e1d-2cfc-420a-8aa6-a27e0a38bf35&clip=5&mode=live&start=31&noteid=c55f2e73-2478-405b-a77f-2f3a5280111c"
"BehaviorSubject is a special type of Subject that works the same way but provides an initial default value passed to the constructor.","RxJS in Angular: Reactive Development","Reacting to Actions","Subject and BehaviorSubject","1:52","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=d0f50e1d-2cfc-420a-8aa6-a27e0a38bf35&clip=5&mode=live&start=112&noteid=040ec811-6180-4582-a9d6-d18c2312fdbc"
"Observable that emits observables are called higher order observables.\nOriginal source stream is called outer observable and the observables emitted inside are called inner obserables.","RxJS in Angular: Reactive Development","Higher-order Mapping Operators","Introduction","0:57","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=7631d873-c6db-4054-8476-7e8bf3c2f7a1&clip=0&mode=live&start=57&noteid=22f48111-598c-4778-85d6-98f001a13290"
"concatMap - waits for inner observable to complete before processing the next one.\nmergeMap - processes inner obervables in parallel.\nswitchMap - unsubscribes from the prior inner observable and switches to the new one.","RxJS in Angular: Reactive Development","Higher-order Mapping Operators","Summary and Checklists","1:40","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=7631d873-c6db-4054-8476-7e8bf3c2f7a1&clip=8&mode=live&start=100&noteid=80a0a22c-c0eb-470a-8627-ac207bce633e"
"RXJS functions-\npipe\ntap\nmap\ntake\nfrom\nof\ninterval\ncatchError\nthrowError\ncombineLatest\nforkJoin\nwithLatestFrom\nfilter\ntoArray\nsubject\nbehaviorSubject\nconcatMap\nmergeMap\nswitchMap\nshareReplay\nscan","RxJS in Angular: Reactive Development","Final Words","Closing","0:21","https://app.pluralsight.com/player?course=rxjs-angular-reactive-development&author=deborah-kurata&name=ed67ae8b-4e9b-4d09-8bfa-316f12399033&clip=5&mode=live&start=21&noteid=16b1d3e7-3255-4057-ae5b-f27dba9f44d5"